years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
x=c(34,56,78,21,45,32,78,53,65,64)
y=c(32,45,62,27,49,59,90,76,43,65)
r=cor(x,y)
cat("corelation coefficient",r)
x <- seq(-3, 3, length=100)
y <- dnorm(x)
plot(x, y, type="l", main="Normal Distribution", xlab="x", ylab="Density")
x <- runif(100, min=0, max=1)
hist(x, main="Uniform Distribution", xlab="x", ylab="Frequency")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
predict(model, data.frame(years=2016))
x <- 0:10
y <- dbinom(x, size=10, prob=0.5)
plot(x, y, type="h", main="Binomial Distribution", xlab="x", ylab="Probability")
subject1 <- c(85, 78, 92, 70, 88)
subject2 <- c(80, 75, 90, 68, 85)
plot(subject1, subject2, main="Scatter Plot of Subject Scores", xlab="Subject 1",ylab="Subject 2")
x <- 0:10
y <- dpois(x, lambda=4)
plot(x, y, type="h", main="Poisson Distribution (Î»=4)", xlab="x", ylab="Probability")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary_output <- summary(model)
print(summary_output)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
data(iris)
t.test(iris$Sepal.Length, mu=5)
data(iris)
t.test(iris$Sepal.Length, mu=5)
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length") abline(model, col="red")
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length") abline(model, col="red")
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length")
abline(model, col="red")
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length")
abline(model, col="red")
Data(iris)
data(iris)
setosa <- subset(iris, Species=="setosa")$Sepal.Length
versicolor <- subset(iris, Species=="versicolor")$Sepal.Length
t.test(setosa, versicolor)
data(iris)
anova_model <- aov(Sepal.Length ~ Species, data=iris)
summary(anova_model)
data(iris)
iris$SepalLength
Cat <- iris$Sepal.Length > mean(iris$Sepal.Length)
table <- table(iris$Species, iris$SepalLengthCat)
data(iris)
iris$SepalLengthCat <- iris$Sepal.Length > mean(iris$Sepal.Length)
table <- table(iris$Species, iris$SepalLengthCat)
chisq.test(table)
x <- seq(-3, 3, length=100)
y <- dnorm(x)
plot(x, y, type="l", main="Normal Distribution", xlab="x", ylab="Density")
predict(lm(Sales ~ Expenses, data=sales_data))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
Sales <- c(500, 550, 580, 600, 620, 640, 680)
Expenses <- c(300, 320, 340, 350, 370, 390, 400)
model <- lm(Sales ~ Expenses)
print(summary(model))
new_expenses <- data.frame(Expenses = c(310, 330, 360, 380))
estimated_sales <- predict(model, new_expenses)
print(estimated_sales)
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
data(iris)
t.test(iris$Sepal.Length[iris$Species == 'setosa'], iris$Sepal.Length[iris$Species ==
'versicolor'])
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
Data(iris)
Data(iris)
Data(iris)
Data(iris)
data(iris)
table(iris$Species, iris$Sepal.Length > mean(iris$Sepal.Length))
chisq.test(table(iris$Species, iris$Sepal.Length > mean(iris$Sepal.Length)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2027)))
# (a) All 5 operations successful if p = 0.8
p <- 0.8
prob_a <- p^5
prob_a
# (b) Exactly 4 operations successful if p = 0.6
p <- 0.6
prob_b <- choose(5, 4) * (p^4) * ((1 - p)^1)
prob_b
# (c) Less than 2 operations successful if p = 0.3
p <- 0.3
prob_c <- dbinom(0, 5, p) + dbinom(1, 5, p)
prob_c
# # (a) All 5 operations successful if p = 0.8
# p <- 0.8
# prob_a <- p^5
# prob_a
#
# # (b) Exactly 4 operations successful if p = 0.6
# p <- 0.6
# prob_b <- choose(5, 4) * (p^4) * ((1 - p)^1)
# prob_b
#
# # (c) Less than 2 operations successful if p = 0.3
# p <- 0.3
# prob_c <- dbinom(0, 5, p) + dbinom(1, 5, p)
# prob_c
#
# (a) Probability exactly 14 survive
n <- 20
p <- 0.8
prob_a <- dbinom(14, n, p)
prob_a
# (b) Probability at least 10 survive
prob_b <- sum(dbinom(10:n, n, p))
prob_b
# (c) Probability at most 16 survive
prob_c <- sum(dbinom(0:16, n, p))
prob_c
# (d) Mean and variance
mean <- n * p
var <- n * p * (1 - p)
mean
var
# (a) Probability the first with training is found on the 5th interview
p <- 0.3
prob_a <- dgeom(4, p)
prob_a
# (b) Expected number of applicants to find the first with training
expected <- 1 / p
expected_b
# (a) Probability the first with training is found on the 5th interview
p <- 0.3
prob_a <- dgeom(4, p)
prob_a
# (b) Expected number of applicants to find the first with training
expected <- 1 / p
expected
lambda <- 7 # average customers per hour
# (a) Probability no more than 3 customers arrive
prob_a <- ppois(3, lambda)
prob_a
# (b) Probability at least 2 customers arrive
prob_b <- 1 - ppois(1, lambda)
prob_b
# (c) Probability exactly 5 customers arrive
prob_c <- dpois(5, lambda)
prob_c
N <- 50 # Population size
K <- 20 # Number of successes in the population
n <- 10 # Sample size
x <- 5  # Value to evaluate
# PMF
pmf <- dhyper(x, K, N - K, n)
pmf
# CDF
cdf <- phyper(x, K, N - K, n)
cdf
mu <- 3.0005
sigma <- 0.0010
lower <- 3.000 - 0.0020
upper <- 3.000 + 0.0020
# Fraction of production that is scrap
scrap <- 1 - pnorm(upper, mu, sigma) + pnorm(lower, mu, sigma)
scrap
mu <- 78
sigma <- sqrt(36) # Standard deviation
# (a) Probability score > 72
prob_a <- 1 - pnorm(72, mu, sigma)
prob_a
# (b) Minimum score for top 10% (A grade)
score_b <- qnorm(0.9, mu, sigma)
score_b
# (c) Cutoff for top 28.1% passing
score_c <- qnorm(1 - 0.281, mu, sigma)
score_c
# (d) Proportion scoring 5+ points above bottom 25% cutoff
bottom_25_cutoff <- qnorm(0.25, mu, sigma)
prob_d <- 1 - pnorm(bottom_25_cutoff + 5, mu, sigma)
prob_d
# (e) P(score > 84 | score > 72)
prob_e <- (1 - pnorm(84, mu, sigma)) / prob_7a
mu <- 78
sigma <- sqrt(36) # Standard deviation
# (a) Probability score > 72
prob_a <- 1 - pnorm(72, mu, sigma)
prob_a
# (b) Minimum score for top 10% (A grade)
score_b <- qnorm(0.9, mu, sigma)
score_b
# (c) Cutoff for top 28.1% passing
score_c <- qnorm(1 - 0.281, mu, sigma)
score_c
# (d) Proportion scoring 5+ points above bottom 25% cutoff
bottom_25_cutoff <- qnorm(0.25, mu, sigma)
prob_d <- 1 - pnorm(bottom_25_cutoff + 5, mu, sigma)
prob_d
# (e) P(score > 84 | score > 72)
prob_e <- (1 - pnorm(84, mu, sigma)) / prob_a
prob_e
pnorm(1.5) - pnorm(-1.5)
n <- 1
while (pnorm(sqrt(n)/4) - pnorm(-sqrt(n)/4) < 0.9) {
n <- n + 1
}
n
se <- 0.75 / sqrt(40)
pnorm(0.2 / se) - pnorm(-0.2 / se)
sample_mean
#mean
oc<-sample(c(1,0),10,replace = TRUE)
sample_mean<-mean(oc)
sample_mean
for (i in 1:1000){
oc<-sample(c(1,0),10,replace = TRUE)
sample_mean<-mean(oc)
mean_list<-append(mean_list,sample_mean)
}
mean_list<-()
#empirical mean
mean_list<-()
mean_list<-c()
for (i in 1:1000){
oc<-sample(c(1,0),10,replace = TRUE)
sample_mean<-mean(oc)
mean_list<-append(mean_list,sample_mean)
}
cat("estimeated mean: ",mean(mean_list))
#variance
oc<-sample(c(1,0),10,replace = TRUE)
sample_var<-var(oc)
sample_var
biased_var<-c()
unbiased_var<-c()
for(i in 1:1000){
oc<-sample(c(0,1),10,rep=TRUE)
sample_mean<-mean(oc)
varian<-0
for(j in 1:10){
varian<-varian+(oc[j]-sample_mean)^2
}
varian<-varian/10
biased_var<-append(biased_var,varian)
unvarian<-o
for(j in 1:10){
unvarian<-unvarian+(oc[j]-sample_mean)^2
}
unvarian<-unvarian/9
unbiased_var<-append(unbiased_var,unvarian)
}
biased_var<-c()
unbiased_var<-c()
for(i in 1:1000){
oc<-sample(c(0,1),10,rep=TRUE)
sample_mean<-mean(oc)
varian<-0
for(j in 1:10){
varian<-varian+(oc[j]-sample_mean)^2
}
varian<-varian/10
biased_var<-append(biased_var,varian)
unvarian<-0
for(j in 1:10){
unvarian<-unvarian+(oc[j]-sample_mean)^2
}
unvarian<-unvarian/9
unbiased_var<-append(unbiased_var,unvarian)
}
cat("biased varian",mean(biased_var))
cat("unbiased varian",mean(unbiased_var))
setwd("E:/anuj/college/TSA/prac 3 logisitc curve")
cat("Q.1 Fitting and Plotting Logistic Curves")
# ---------------------------------------
# Step 1: Simulate Logistic-Like Data
# ---------------------------------------
set.seed(123)
x <- 1:20
y <- 100 / (1 + exp(-0.4 * (x - 10))) + rnorm(20, 0, 2)  # Add small noise
# Plot the data
plot(x, y, pch = 16, col = "blue", main = "Logistic-like Data", xlab = "x", ylab = "y")
# ---------------------------------------
# Step 2: Fit Logistic Model using nls()
# Model: y = L / (1 + exp(-k(x - x0)))
# ---------------------------------------
logistic_model <- nls(y ~ L / (1 + exp(-k * (x - x0))),
start = list(L = 100, k = 0.5, x0 = 10))
summary(logistic_model)
# ---------------------------------------
# Step 3: Plot Fitted Curve with Data
# ---------------------------------------
x_new <- seq(min(x), max(x), length.out = 100)
y_pred <- predict(logistic_model, newdata = data.frame(x = x_new))
plot(x, y, pch = 16, col = "darkgreen", main = "Fitted Logistic Curve", xlab = "x", ylab = "y")
lines(x_new, y_pred, col = "red", lwd = 2)
# ---------------------------------------
# Step 4: Plot Residuals
# ---------------------------------------
res <- resid(logistic_model)
plot(x, res, type = "h", lwd = 2, col = "orange", main = "Residual Plot", ylab = "Residuals")
abline(h = 0, col = "black", lty = 2)
# ---------------------------------------
# Step 5: Fit Another Model with Different Starting Parameters
# ---------------------------------------
logistic_model2 <- nls(y ~ L / (1 + exp(-k * (x - x0))),
start = list(L = 90, k = 0.3, x0 = 8))
y_pred2 <- predict(logistic_model2, newdata = data.frame(x = x_new))
plot(x, y, pch = 16, col = "black", main = "Comparison of Logistic Fits", xlab = "x", ylab = "y")
lines(x_new, y_pred, col = "blue", lwd = 2)
lines(x_new, y_pred2, col = "purple", lwd = 2, lty = 2)
legend("bottomright", legend = c("Model 1", "Model 2"),
col = c("blue", "purple"), lwd = 2, lty = c(1, 2))
# ---------------------------------------
# Step 6: Interpret Parameters
# ---------------------------------------
cat("Estimated Parameters from Model 1:\n")
print(coef(logistic_model))
cat("\nMeaning:\n")
cat("L: Asymptote (max value as x â â)\n")
cat("k: Growth rate (steepness)\n")
cat("x0: Midpoint (x-value at half max)\n")
# ---------------------------------------
# Step 7: ggplot2 Visualization (Optional)
# ---------------------------------------
library(ggplot2)
df <- data.frame(x = x, y = y)
df_pred <- data.frame(x = x_new, y = y_pred)
ggplot(df, aes(x, y)) +
geom_point(color = "black", size = 2) +
geom_line(data = df_pred, aes(x, y), color = "blue", size = 1.2) +
labs(title = "Logistic Curve Fit using ggplot2", x = "x", y = "y") +
theme_minimal()
cat("Q.2 Code to Visualize Impact of Each Parameter (L, k, x0)")
# Set common x values
x <- seq(0, 20, length.out = 200)
# ---------------------------------------
# Plot 1: Effect of L (Asymptote)
# ---------------------------------------
L_vals <- c(50, 100, 150)
k <- 0.5
x0 <- 10
plot(x, rep(NA, length(x)), type = "n", ylim = c(0, max(L_vals)),
main = "Effect of 'L' (Asymptote)", xlab = "x", ylab = "y")
for (L in L_vals) {
y <- L / (1 + exp(-k * (x - x0)))
lines(x, y, col = which(L_vals == L), lwd = 2)
}
legend("bottomright", legend = paste("L =", L_vals), col = 1:length(L_vals), lwd = 2)
# ---------------------------------------
# Plot 2: Effect of k (Growth Rate)
# ---------------------------------------
L <- 100
k_vals <- c(0.2, 0.5, 1)
x0 <- 10
plot(x, rep(NA, length(x)), type = "n", ylim = c(0, L),
main = "Effect of 'k' (Growth Rate)", xlab = "x", ylab = "y")
for (k in k_vals) {
y <- L / (1 + exp(-k * (x - x0)))
lines(x, y, col = which(k_vals == k), lwd = 2)
}
legend("bottomright", legend = paste("k =", k_vals), col = 1:length(k_vals), lwd = 2)
# ---------------------------------------
# Plot 3: Effect of x0 (Midpoint)
# ---------------------------------------
L <- 100
k <- 0.5
x0_vals <- c(5, 10, 15)
plot(x, rep(NA, length(x)), type = "n", ylim = c(0, L),
main = "Effect of 'x0' (Midpoint)", xlab = "x", ylab = "y")
for (x0 in x0_vals) {
y <- L / (1 + exp(-k * (x - x0)))
lines(x, y, col = which(x0_vals == x0), lwd = 2)
}
legend("bottomright", legend = paste("x0 =", x0_vals), col = 1:length(x0_vals), lwd = 2)
source("E:/anuj/college/TSA/prac 3 logisitc curve/prac 3 logistic curve.R")
source("E:/anuj/college/TSA/prac 3 logisitc curve/prac 3 logistic curve.R")
source("E:/anuj/college/TSA/prac 3 logisitc curve/prac 3 logistic curve.R")
source("E:/anuj/college/TSA/prac 3 logisitc curve/prac 3 logistic curve.R")
