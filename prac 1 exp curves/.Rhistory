model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
Sales <- c(500, 550, 580, 600, 620, 640, 680)
Expenses <- c(300, 320, 340, 350, 370, 390, 400)
model <- lm(Sales ~ Expenses)
print(summary(model))
new_expenses <- data.frame(Expenses = c(310, 330, 360, 380))
estimated_sales <- predict(model, new_expenses)
print(estimated_sales)
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
data(iris)
t.test(iris$Sepal.Length[iris$Species == 'setosa'], iris$Sepal.Length[iris$Species ==
'versicolor'])
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
Data(iris)
Data(iris)
Data(iris)
Data(iris)
data(iris)
table(iris$Species, iris$Sepal.Length > mean(iris$Sepal.Length))
chisq.test(table(iris$Species, iris$Sepal.Length > mean(iris$Sepal.Length)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2027)))
# (a) All 5 operations successful if p = 0.8
p <- 0.8
prob_a <- p^5
prob_a
# (b) Exactly 4 operations successful if p = 0.6
p <- 0.6
prob_b <- choose(5, 4) * (p^4) * ((1 - p)^1)
prob_b
# (c) Less than 2 operations successful if p = 0.3
p <- 0.3
prob_c <- dbinom(0, 5, p) + dbinom(1, 5, p)
prob_c
# # (a) All 5 operations successful if p = 0.8
# p <- 0.8
# prob_a <- p^5
# prob_a
#
# # (b) Exactly 4 operations successful if p = 0.6
# p <- 0.6
# prob_b <- choose(5, 4) * (p^4) * ((1 - p)^1)
# prob_b
#
# # (c) Less than 2 operations successful if p = 0.3
# p <- 0.3
# prob_c <- dbinom(0, 5, p) + dbinom(1, 5, p)
# prob_c
#
# (a) Probability exactly 14 survive
n <- 20
p <- 0.8
prob_a <- dbinom(14, n, p)
prob_a
# (b) Probability at least 10 survive
prob_b <- sum(dbinom(10:n, n, p))
prob_b
# (c) Probability at most 16 survive
prob_c <- sum(dbinom(0:16, n, p))
prob_c
# (d) Mean and variance
mean <- n * p
var <- n * p * (1 - p)
mean
var
# (a) Probability the first with training is found on the 5th interview
p <- 0.3
prob_a <- dgeom(4, p)
prob_a
# (b) Expected number of applicants to find the first with training
expected <- 1 / p
expected_b
# (a) Probability the first with training is found on the 5th interview
p <- 0.3
prob_a <- dgeom(4, p)
prob_a
# (b) Expected number of applicants to find the first with training
expected <- 1 / p
expected
lambda <- 7 # average customers per hour
# (a) Probability no more than 3 customers arrive
prob_a <- ppois(3, lambda)
prob_a
# (b) Probability at least 2 customers arrive
prob_b <- 1 - ppois(1, lambda)
prob_b
# (c) Probability exactly 5 customers arrive
prob_c <- dpois(5, lambda)
prob_c
N <- 50 # Population size
K <- 20 # Number of successes in the population
n <- 10 # Sample size
x <- 5  # Value to evaluate
# PMF
pmf <- dhyper(x, K, N - K, n)
pmf
# CDF
cdf <- phyper(x, K, N - K, n)
cdf
mu <- 3.0005
sigma <- 0.0010
lower <- 3.000 - 0.0020
upper <- 3.000 + 0.0020
# Fraction of production that is scrap
scrap <- 1 - pnorm(upper, mu, sigma) + pnorm(lower, mu, sigma)
scrap
mu <- 78
sigma <- sqrt(36) # Standard deviation
# (a) Probability score > 72
prob_a <- 1 - pnorm(72, mu, sigma)
prob_a
# (b) Minimum score for top 10% (A grade)
score_b <- qnorm(0.9, mu, sigma)
score_b
# (c) Cutoff for top 28.1% passing
score_c <- qnorm(1 - 0.281, mu, sigma)
score_c
# (d) Proportion scoring 5+ points above bottom 25% cutoff
bottom_25_cutoff <- qnorm(0.25, mu, sigma)
prob_d <- 1 - pnorm(bottom_25_cutoff + 5, mu, sigma)
prob_d
# (e) P(score > 84 | score > 72)
prob_e <- (1 - pnorm(84, mu, sigma)) / prob_7a
mu <- 78
sigma <- sqrt(36) # Standard deviation
# (a) Probability score > 72
prob_a <- 1 - pnorm(72, mu, sigma)
prob_a
# (b) Minimum score for top 10% (A grade)
score_b <- qnorm(0.9, mu, sigma)
score_b
# (c) Cutoff for top 28.1% passing
score_c <- qnorm(1 - 0.281, mu, sigma)
score_c
# (d) Proportion scoring 5+ points above bottom 25% cutoff
bottom_25_cutoff <- qnorm(0.25, mu, sigma)
prob_d <- 1 - pnorm(bottom_25_cutoff + 5, mu, sigma)
prob_d
# (e) P(score > 84 | score > 72)
prob_e <- (1 - pnorm(84, mu, sigma)) / prob_a
prob_e
pnorm(1.5) - pnorm(-1.5)
n <- 1
while (pnorm(sqrt(n)/4) - pnorm(-sqrt(n)/4) < 0.9) {
n <- n + 1
}
n
se <- 0.75 / sqrt(40)
pnorm(0.2 / se) - pnorm(-0.2 / se)
sample_mean
#mean
oc<-sample(c(1,0),10,replace = TRUE)
sample_mean<-mean(oc)
sample_mean
for (i in 1:1000){
oc<-sample(c(1,0),10,replace = TRUE)
sample_mean<-mean(oc)
mean_list<-append(mean_list,sample_mean)
}
mean_list<-()
#empirical mean
mean_list<-()
mean_list<-c()
for (i in 1:1000){
oc<-sample(c(1,0),10,replace = TRUE)
sample_mean<-mean(oc)
mean_list<-append(mean_list,sample_mean)
}
cat("estimeated mean: ",mean(mean_list))
#variance
oc<-sample(c(1,0),10,replace = TRUE)
sample_var<-var(oc)
sample_var
biased_var<-c()
unbiased_var<-c()
for(i in 1:1000){
oc<-sample(c(0,1),10,rep=TRUE)
sample_mean<-mean(oc)
varian<-0
for(j in 1:10){
varian<-varian+(oc[j]-sample_mean)^2
}
varian<-varian/10
biased_var<-append(biased_var,varian)
unvarian<-o
for(j in 1:10){
unvarian<-unvarian+(oc[j]-sample_mean)^2
}
unvarian<-unvarian/9
unbiased_var<-append(unbiased_var,unvarian)
}
biased_var<-c()
unbiased_var<-c()
for(i in 1:1000){
oc<-sample(c(0,1),10,rep=TRUE)
sample_mean<-mean(oc)
varian<-0
for(j in 1:10){
varian<-varian+(oc[j]-sample_mean)^2
}
varian<-varian/10
biased_var<-append(biased_var,varian)
unvarian<-0
for(j in 1:10){
unvarian<-unvarian+(oc[j]-sample_mean)^2
}
unvarian<-unvarian/9
unbiased_var<-append(unbiased_var,unvarian)
}
cat("biased varian",mean(biased_var))
cat("unbiased varian",mean(unbiased_var))
setwd("E:/anuj/college/TSA/prac 1")
cat("Q.1 Plot single modified exponential curve")
# Sample data
x <- 1:10
y <- 2 + 3 * exp(-0.4 * x)
# Base plot with first line
plot(x, y, type = "l", col = "blue", lwd = 2,
xlab = "X", ylab = "Y", main = "Three Exponential Lines")
cat("Q.2 Plot 3 modified exponential curve in single plot")
# Sample data
x <- 1:10
y1 <- 2 + 3 * exp(-0.4 * x)
y2 <- 1 + 5 * exp(-0.2 * x)
y3 <- 0.5 + 6 * exp(-0.1 * x)
# Base plot with first line
plot(x, y1, type = "l", col = "blue", lwd = 2, ylim = c(0, max(y1, y2, y3)),
xlab = "X", ylab = "Y", main = "Three Exponential Lines")
# Add second line
lines(x, y2, col = "red", lwd = 2)
# Add third line
lines(x, y3, col = "green", lwd = 2)
# Add legend
legend("topright", legend = c("Line 1", "Line 2", "Line 3"),
col = c("blue", "red", "green"), lwd = 2)
cat("Q.3 Fit modified exponential curve model and plot residuals")
# --------------------------------------
# Step 1: Simulate Sample Data
# --------------------------------------
x <- 1:10
y <- c(10.2, 7.5, 5.6, 4.3, 3.5, 3.0, 2.7, 2.5, 2.3, 2.1)
# --------------------------------------
# Step 2: Scatter Plot the Data
# --------------------------------------
plot(x, y, main = "Observed Data",
xlab = "X", ylab = "Y", pch = 16, col = "darkgreen")
# --------------------------------------
# Step 3: Fit Modified Exponential Model: y = a + b * exp(c * x)
# --------------------------------------
model <- nls(y ~ a + b * exp(c * x),
start = list(a = 2, b = 8, c = -0.5))
# --------------------------------------
# Step 4: View Model Summary
# --------------------------------------
summary(model)
# --------------------------------------
# Step 5: Plot Fitted Curve with Data
# --------------------------------------
# Create smooth x values for curve
x_new <- seq(min(x), max(x), length.out = 100)
y_pred <- predict(model, newdata = data.frame(x = x_new))
# Plot data
plot(x, y, pch = 16, col = "darkgreen", xlab = "X", ylab = "Y",
main = "Modified Exponential Curve Fit")
# Add fitted curve
lines(x_new, y_pred, col = "blue", lwd = 2)
# --------------------------------------
# Step 6: Add Fitted Values to Original Data
# --------------------------------------
fitted_vals <- fitted(model)
data.frame(x = x, y = y, fitted = round(fitted_vals, 2))
# --------------------------------------
# Step 7: Plot Residuals (Observed - Fitted)
# --------------------------------------
residuals <- resid(model)
plot(x, residuals, type = "h", col = "red", lwd = 2,
main = "Residual Plot", xlab = "X", ylab = "Residuals")
abline(h = 0, col = "black", lty = 2)
# --------------------------------------
# Step 8: Plot Multiple Fits (Optional)
# --------------------------------------
# Fit another model with different starting values (just for comparison)
model2 <- nls(y ~ a + b * exp(c * x),
start = list(a = 2.5, b = 7, c = -0.3))
y_pred2 <- predict(model2, newdata = data.frame(x = x_new))
# Plot both fits
plot(x, y, pch = 16, col = "black", main = "Comparing Two Fits",
xlab = "X", ylab = "Y")
lines(x_new, y_pred, col = "blue", lwd = 2)     # Original fit
lines(x_new, y_pred2, col = "red", lwd = 2, lty = 2)  # Second fit
legend("topright", legend = c("Fit 1", "Fit 2"),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# --------------------------------------
# Step 9: Interpret Parameters
# --------------------------------------
cat("Estimated coefficients:\n")
print(coef(model))
cat("\nParameter meanings:\n")
cat("a: Asymptote (value as x → ∞)\n")
cat("b: Starting scale (value added to a at x = 0)\n")
cat("c: Rate of decay/growth (negative = decay, positive = growth)\n")
cat("Q. 4 Plot effects of changing a, b and c parameters in modified exponential curve")
# Common x values
x <- seq(0, 10, length.out = 100)
# -----------------------------
# 1. Effect of changing `a`
# -----------------------------
a_vals <- c(0, 2, 4)
b <- 5
c <- -0.5
plot(x, rep(NA, length(x)), type = "n", ylim = c(0, 10), main = "Effect of 'a'",
xlab = "x", ylab = "y")
for (a in a_vals) {
y <- a + b * exp(c * x)
lines(x, y, lwd = 2, col = which(a_vals == a))
}
legend("topright", legend = paste("a =", a_vals), col = 1:3, lwd = 2)
x <- seq(0, 10, length.out = 100)
# -----------------------------
# 2. Effect of changing `b`
# -----------------------------
b_vals <- c(2, 5, 8)
a <- 2
c <- -0.5
plot(x, rep(NA, length(x)), type = "n", ylim = c(0, 10), main = "Effect of 'b'",
xlab = "x", ylab = "y")
for (b in b_vals) {
y <- a + b * exp(c * x)
lines(x, y, lwd = 2, col = which(b_vals == b))
}
legend("topright", legend = paste("b =", b_vals), col = 1:3, lwd = 2)
x <- seq(0, 10, length.out = 100)
# -----------------------------
# 3. Effect of changing `c`
# -----------------------------
c_vals <- c(-1, -0.5, -0.1)
a <- 2
b <- 5
plot(x, rep(NA, length(x)), type = "n", ylim = c(0, 10), main = "Effect of 'c'",
xlab = "x", ylab = "y")
for (c in c_vals) {
y <- a + b * exp(c * x)
lines(x, y, lwd = 2, col = which(c_vals == c))
}
legend("topright", legend = paste("c =", c_vals), col = 1:3, lwd = 2)
cat("Q.5 Plot different types of exponential curves in 2*2 matrix
1. Exponential Growth
2. Exponential Decay
3. Negative Exponential Growth
4. Negative Exponential Decay")
# Set plotting area: 2 rows x 2 columns , mfrow = multi-frame row-wises
par(mfrow = c(2, 2))
# Common x values
x <- seq(0, 10, length.out = 100)
# -------------------------------
# 1. Exponential Growth (Convex Up)
a <- 0; b <- 2; c <- 0.5
y <- a + b * exp(c * x)
plot(x, y, type = "l", col = "blue", lwd = 2,
main = "Exponential Growth (Convex ↑)", ylab = "y", xlab = "x")
# -------------------------------
# 2. Exponential Decay (Concave Down)
a <- 0; b <- 2; c <- -0.5
y <- a + b * exp(c * x)
plot(x, y, type = "l", col = "red", lwd = 2,
main = "Exponential Decay (Concave ↓)", ylab = "y", xlab = "x")
# -------------------------------
# 5. Negative Exponential Growth (Concave Up)
a <- 5; b <- -3; c <- -0.5
y <- a + b * exp(c * x)
plot(x, y, type = "l", col = "purple", lwd = 2,
main = "Neg. Exp. Growth (Concave ↑)", ylab = "y", xlab = "x")
# -------------------------------
# 6. Negative Exponential Decay (Convex Down)
a <- 5; b <- -3; c <- 0.5
y <- a + b * exp(c * x)
plot(x, y, type = "l", col = "brown", lwd = 2,
main = "Neg. Exp. Decay (Convex ↓)", ylab = "y", xlab = "x")
main = "Neg. Exp. Decay (Convex ↓)", ylab = "y", xlab = "x")
cat("Q.6 Plot all 4 types of modifed exponential curve in single plot")
curve(0 + 1 * exp(0.5 * x), from=0, to=5, col="blue", lwd=2, ylab="y", main="Different Exponential Curves", ylim=c(-2, 4))
curve(0 + 1 * exp(-0.5 * x), add=TRUE, col="red", lwd=2)
curve(2 - 1 * exp(0.5 * x), add=TRUE, col="darkgreen", lwd=2)
curve(2 - 1 * exp(-0.5 * x), add=TRUE, col="orange", lwd=2)
legend("topright", legend=c("Exp Growth", "Exp Decay", "Neg Exp Growth", "Neg Exp Decay"),
col=c("blue", "red", "darkgreen", "orange"), lwd=2)
cat("Q.6 Plot all 4 types of modifed exponential curve in single plot")
curve(0 + 1 * exp(0.5 * x), from=0, to=5, col="blue", lwd=2, ylab="y", main="Different Exponential Curves", ylim=c(-2, 4))
curve(0 + 1 * exp(-0.5 * x), add=TRUE, col="red", lwd=2)
curve(2 - 1 * exp(0.5 * x), add=TRUE, col="darkgreen", lwd=2)
curve(2 - 1 * exp(-0.5 * x), add=TRUE, col="orange", lwd=2)
legend("topright", legend=c("Exp Growth", "Exp Decay", "Neg Exp Growth", "Neg Exp Decay"),
col=c("blue", "red", "darkgreen", "orange"), lwd=2)
cat("Q.6 Plot all 4 types of modifed exponential curve in single plot")
curve(0 + 1 * exp(0.5 * x), from=0, to=5, col="blue", lwd=2, ylab="y", main="Different Exponential Curves", ylim=c(-2, 4))
curve(0 + 1 * exp(-0.5 * x), add=TRUE, col="red", lwd=2)
curve(2 - 1 * exp(0.5 * x), add=TRUE, col="darkgreen", lwd=2)
curve(2 - 1 * exp(-0.5 * x), add=TRUE, col="orange", lwd=2)
legend("topright", legend=c("Exp Growth", "Exp Decay", "Neg Exp Growth", "Neg Exp Decay"),
col=c("blue", "red", "darkgreen", "orange"), lwd=2)
cat("Q.6 Plot all 4 types of modifed exponential curve in single plot")
curve(0 + 1 * exp(0.5 * x), from=0, to=5, col="blue", lwd=2, ylab="y", main="Different Exponential Curves", ylim=c(-2, 4))
curve(0 + 1 * exp(-0.5 * x), add=TRUE, col="red", lwd=2)
curve(2 - 1 * exp(0.5 * x), add=TRUE, col="darkgreen", lwd=2)
curve(2 - 1 * exp(-0.5 * x), add=TRUE, col="orange", lwd=2)
legend("topright", legend=c("Exp Growth", "Exp Decay", "Neg Exp Growth", "Neg Exp Decay"),
col=c("blue", "red", "darkgreen", "orange"), lwd=2)
cat("Q.6 Plot all 4 types of modifed exponential curve in single plot")
curve(0 + 1 * exp(0.5 * x), from=0, to=5, col="blue", lwd=2, ylab="y", main="Different Exponential Curves", ylim=c(-2, 4))
curve(0 + 1 * exp(-0.5 * x), add=TRUE, col="red", lwd=2)
curve(2 - 1 * exp(0.5 * x), add=TRUE, col="darkgreen", lwd=2)
curve(2 - 1 * exp(-0.5 * x), add=TRUE, col="orange", lwd=2)
legend("topright", legend=c("Exp Growth", "Exp Decay", "Neg Exp Growth", "Neg Exp Decay"),
col=c("blue", "red", "darkgreen", "orange"), lwd=2)
cat("Extra Q.")
# Load required library
library(ggplot2)
# 1. Sample data
set.seed(123)
x <- 1:10
y <- 10 + 5 * exp(0.3 * x) + rnorm(10, 0, 5)  # true model: a + b*e^(c*x)
df <- data.frame(x = x, y = y)
# 2. Fit Model 1: y = a + b * exp(c * x)
fit_exp <- nls(y ~ a + b * exp(c * x), data = df,
start = list(a = 10, b = 5, c = 0.3))
summary(fit_exp)
# 3. Fit Model 2: y = a + b * c^x
fit_pow <- nls(y ~ a + b * c^x, data = df,
start = list(a = 10, b = 5, c = 1.3))
summary(fit_pow)
# 4. Create predictions for a smooth curve
x_seq <- seq(min(x), max(x), length.out = 100)
pred_df <- data.frame(
x = x_seq,
y_exp = predict(fit_exp, newdata = data.frame(x = x_seq)),
y_pow = predict(fit_pow, newdata = data.frame(x = x_seq))
)
# 5. Plot
ggplot(df, aes(x, y)) +
geom_point(size = 2, color = "black") +
geom_line(data = pred_df, aes(x, y_exp), color = "blue", size = 0.5, linetype = "solid") +
geom_line(data = pred_df, aes(x, y_pow), color = "red", size = 1.2, linetype = "dashed") +
labs(title = "Modified Exponential Curve Fitting",
subtitle = "Blue: y = a + b * exp(c * x) | Red Dashed: y = a + b * c^x",
x = "x", y = "y") +
theme_minimal()
cat ("Question -
How R calculates a,b and c parameters in modified exponential.
Other than plot function how we can draw same graphs in R.
What if we start with different stating points are we going to get same model parameters at the end.
")
source("E:/anuj/college/TSA/prac 1/prac 1 exp curves.R")
